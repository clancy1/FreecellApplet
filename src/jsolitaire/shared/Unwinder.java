/**
 * Given a log file generated by this applet, move the game from a beginning initial state to an end state.
 */

package jsolitaire.shared;

import jsolitaire.freecell.FreeCell;

import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

public class Unwinder 
{
	// Other notes:
	// Card values are A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K
	// Suit values are 's', 'c', 'h', 'd';
	
	// Notes:
	// Stacks 0 - 7 are freecells
	// Stacks 8 - 11 are foundation stacks
	// Stacks 12 - 19 are tableau stacks
	
	public static CardStack[] unwindLog(String logFile)
	{
		CardStack[] game;
		ArrayList<String> stacks = new ArrayList<String>();
		ArrayList<String> cardMoves = new ArrayList<String>();
		Scanner scanner = null;
		
		// Read through the log file
		try
		{
			scanner = new Scanner(new File(logFile));
			while (scanner.hasNext())
			{
				String line = scanner.nextLine();
				// Put line into stacks or cardMoves, based on contents of the line.
				// Stack lines should start with numbers, moves should have "move" somewhere in the line.
				//System.out.println(line);
				if (line.matches("^\\d.*"))
				{
					stacks.add(line);
				}
				else if (line.contains("Card Move"))
				{
					cardMoves.add(line);
				}
			}
			
			// Process the stacks first
			game = new CardStack[stacks.size()];
			for (int j = 0; j < stacks.size(); j++)
			{
				String stack = stacks.get(j);
				
				game[j] = new CardStack(52);
				String[] stackParts = stack.split("\\s+");
				for (int k = 1; k < stackParts.length; k++)
				{
					String rank;
					String suit;
					int rankNum = -1;
					int suitNum = -1;
					
					String[] dummyCard = stackParts[k].split(":");
					String card = dummyCard[1];
					// Check length in order to get proper card translation
					// If length 3, has 10 with it.
					// Otherwise, just use single digit / character
					if (card.length() == 2)
					{
						rank = "" + card.charAt(0);
						suit = "" + card.charAt(1);
					}
					else
					{
						rank = "" + card.substring(0, 2);
						suit = "" + card.charAt(2);
					}
					
					// Turn rank and suit into card, and add card to stack
					switch(rank)
					{
						case "A":
							rankNum = Card.ACE;
							break;
						case "J":
							rankNum = Card.JACK;
							break;
						case "Q":
							rankNum = Card.QUEEN;
							break;
						case "K":
							rankNum = Card.KING;
							break;
						default:
							// Need the minus one because of 0 index
							// Thus A is value 0, 2 is value 1, 3 is value 2, etc.
							rankNum = Integer.parseInt(rank) - 1;
							break;
					}
					switch(suit)
					{
						case "s":
							suitNum = Card.SPADE;
							break;
						case "c":
							suitNum = Card.CLUBS;
							break;
						case "h":
							suitNum = Card.HEARTS;
							break;
						case "d":
							suitNum = Card.DIAMONDS;
							break;
					}
					
					game[j].add(new Card(rankNum, suitNum));
				}
				System.out.println();
			}
			
			// Apply the moves
			for (String move : cardMoves)
			{
				String[] fields = move.split(",");
				// Field index 1 is card stack source, index 2 is dest
				int source = Integer.parseInt(fields[1]);
				int dest = Integer.parseInt(fields[2]);
				game[dest].add(game[source].top());
				game[source].remove(1);
			}
			
			// Check
			for (int j = 0; j < game.length; j++)
			{
				System.out.println(j + " " + game[j].toString());
			}
			
			// Debug stuff; print out the stacks and moves to see if it got the right lines
			/*
			System.out.println("Start stacks");
			for (String stack : stacks)
			{
				System.out.println(stack);
			}
			System.out.println("End stacks");
			System.out.println("Start moves");
			for (String move : cardMoves)
			{
				System.out.println(move);
			}
			System.out.println("End moves");*/
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if (scanner != null)
			{
				scanner.close();
			}
		}
			// Pull out the deck parts and the move parts
		return null;
	}
	
	private String getStacksAndMoves()
	{
		return "";
	}
	
	public static void main(String[] args)
	{
		unwindLog(args[0]);
	}
}
